import React from 'react';
import PropTypes from 'prop-types';
import { format } from 'date-fns';

import './movie-header.css';

import { TmdbServiceConsumer } from '../tmdb-service-context';

export default class Movie extends React.Component {
  constructor(props) {
    super(props);

    this.state = {
      originalTitle: props.original_title,
      releaseDate: props.release_date,
      overview: props.overview,
      posterPath: props.poster_path,
      rating: props.rating,
      voteAverage: props.vote_average,
      genreIds: props.genre_ids
    };

    this.truncateDescription = (description) => {
      if (typeof description === 'undefined') {
        return '';
      }
      const indexOfSpaceAfterTruncate = description.indexOf(' ', 200);
      return description.slice(0, indexOfSpaceAfterTruncate).concat('â€¦');
    };

    this.getVoteColorClass = (vote) => {
      if (vote < 3) {
        return 'voteBad';
      }

      if (vote < 5) {
        return 'votePoor';
      }

      if (vote < 7) {
        return 'voteGood';
      }

      return 'voteAwesome';
    };

    this. getGenreNames = (genreIds, allMovieGenres) => {
      return genreIds.map(id => {
        return allMovieGenres.map(genre => {
          if (genre.id === id) {
            return <span className="movie-genre">{genre.name}</span>;
          }

          return "";
        });
      });

      
    };

    this.componentDidUpdate = (prevProps) => {
      const {rating} = this.props;
      if(rating !== prevProps.rating) {
        this.setState({
          rating
        });
      }
    };
  }

  render() {
    const { originalTitle, releaseDate, overview, posterPath, rating, voteAverage, genreIds } = this.state;

    const { id, onRate } = this.props;

    const voteClasses =  'voteAverage '.concat(this.getVoteColorClass(voteAverage));

    const imageSrc = posterPath === null ? '' : `https://image.tmdb.org/t/p/w500${posterPath}`;

    let dateFormatted;
    try {
      dateFormatted = format(new Date(releaseDate), 'MMMM d, yyyy');
    } catch (error) {
      dateFormatted = '';
    }

    const desktopContainer = (
      
      return (
        <TmdbServiceConsumer>
          {(allMovieGenres) => {
            return 
              {document.body.clientWidth > 768 ? (
                <li className="movie-container">
                  <Image alt="movie" src={imageSrc} />
                  {/* className="movie-img" */}
                  {/* <img alt="poster" src={imageSrc} className="movie-img" /> */}
                  <div className="movie-stats">
                    <div className="movie-header">
                      <h5 className="title">{originalTitle}</h5>
                      <span className={voteClasses}>{voteAverage}</span>
                    </div>
                    <p className="movie-date">{dateFormatted}</p>
                    <div className="movie-genres">{this.getGenreNames(genreIds, allMovieGenres)}</div>
                  </div>
                  <div className="movie-footer">
                    <p className="movie-description">{this.truncateDescription(overview)}</p>
                    <Rate count={10} allowHalf onChange={(value) => onRate(value, id)} value={rating}
                    />
                  </div>
                </li>
              ) : (            <li className="movie-container">
         <Image alt="movie" src={imageSrc} />
         {/* className="movie-img" */}
         {/* <img alt="poster" src={imageSrc} className="movie-img" /> */}
         <div className="movie-stats">
           <div className="movie-header">
             <h5 className="title">{originalTitle}</h5>
             <span className={voteClasses}>{voteAverage}</span>
           </div>
           <p className="movie-date">{dateFormatted}</p>
           <div className="movie-genres">{this.getGenreNames(genreIds, allMovieGenres)}</div>
         </div>
         <div className="movie-footer">
           <p className="movie-description">{this.truncateDescription(overview)}</p>
           <Rate count={10} allowHalf onChange={(value) => onRate(value, id)} value={rating}
           />
         </div>
       </li>);
              };
          }}
        </TmdbServiceConsumer>
      );
    }
  }

  Movie.defaultProps = {
    poster_path: null,
    release_date: '',
    rating: 0,
    vote_average: 0,
    genre_ids: [],
  };

  Movie.propTypes = {
    original_title: PropTypes.string.isRequired,
    release_date: PropTypes.string,
    overview: PropTypes.string.isRequired,
    poster_path: PropTypes.string,
    id: PropTypes.number.isRequired,
    rating: PropTypes.number,
    vote_average: PropTypes.number,
    genre_ids: PropTypes.arrayOf(PropTypes.number),
    onRate: PropTypes.func.isRequired,
  };
